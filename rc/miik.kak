define-command -docstring 'Enable miik for the window' \
miik-enable-window %{
    require-module miik

    add-highlighter window/miik_response replace-ranges miik_response
    set-option window completers "option=miik_completions" %opt{completers}
    hook -group miik window InsertChar .* %{
        miik-generate-completion-candidates
    }
}

define-command -docstring 'Disable miik for the window' \
miik-disable-window %{
    remove-highlighter window/miik_response
    set-option -remove window completers "option=miik_completions"
    remove-hooks window miik
}

provide-module miik %{
    define-command -docstring 'Selects a Lisp form' \
    miik-select-form %{
        try %{
            execute-keys '<a-a>b'
            miik-select-form
        }
    }

    declare-option -docstring 'The location of the miik' str miik_host 'localhost:3700'
    declare-option -docstring 'The responses given to Kakoune by miik' range-specs miik_response
    declare-option -docstring 'The completions generated by miik' -hidden completions miik_completions

    define-command -docstring 'Sends the selection to the miik server' \
    miik-send-selection %{
        evaluate-commands -draft -save-regs '^ab' %{
            # Evaluate things in the correct package
            execute-keys 'Z<a-/>in-package<ret><a-a>b"byz'

            set-register a %sh{ printf '%s\n%s' "$kak_main_reg_b" "$kak_selection" | socat - "tcp:$kak_opt_miik_host" }
            execute-keys '<a-:>;'
            set-option window miik_response %val{timestamp} "%val{selection_desc}|%val{selection}{comment}{\} %reg{a}"
        }
    }

    # TODO: Hide this
    define-command -docstring 'Generates miik completion candidates' \
    miik-generate-completion-candidates %{
        evaluate-commands -draft -save-regs '^abc' %{
            execute-keys '<esc>,Z<a-/>in-package<ret><a-a>b"byz'
            # Select the current symbol
            execute-keys 'hb"ay'
            # Select the package, if it exists
            set-register c ''
            try %{
               execute-keys 'h<a-k>:<ret>b"cy'
            } catch %{
               execute-keys 'l'
            }

            evaluate-commands %sh{
                location="$kak_cursor_line.$kak_cursor_column@$kak_timestamp"
                escape () {
                    printf '%s' "$1" | sed 's/"/\\"/g'
                }

                # Kakoune uses single quotes in quoted_ options
                # Common Lisp only support double quotes.
                # So we have to escape manually
                # TODO: Move the processing to the Lisp side
                result=$(printf '%s\n%s' "$kak_reg_b" \
                       "(apropos \"$(escape "$kak_reg_a")\" '$(escape "${kak_reg_c:-nil}"))" |
                        socat - "tcp:$kak_opt_miik_host" |
                        sed 's/\\/\\\\/g;s/|/\\|/g' |
                        awk -F\  '{print "%{" $1"||{\\}"$0 "}"}' |
                        tr "\n" " " |
                        tr '[:upper:]' '[:lower:]')
                printf 'set-option buffer=%s miik_completions %s %s' "$kak_bufname" "$location" "$result"
            }
        }
    }

    define-command -docstring 'Sends a form to the miik server' \
    miik-send-form %{
        evaluate-commands -draft %{
            miik-select-form
            miik-send-selection
        }
    }

    declare-user-mode miik
}
