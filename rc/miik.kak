define-command -docstring 'Enable miik for the window' \
miik-enable-window %{
    require-module miik

    add-highlighter window/miik_response replace-ranges miik_response
    set-option window completers "option=miik_completions" %opt{completers}
    hook -group miik window User miik_image_changed %{
        miik-generate-completion-candidates
    }
    # If the user focuses into the window, assume they switched to the REPL
    hook -group miik window FocusIn %val{client} %{
        trigger-user-hook miik_image_changed
    }
    hook -group miik window InsertChar .* %{
        evaluate-commands -draft %{
            execute-keys '<a-b>'
            set-option window miik_completions "%val{cursor_line}.%val{cursor_column}@%val{timestamp}" %opt{miik_completions_response}
        }
    }
}

define-command -docstring 'Disable miik for the window' \
miik-disable-window %{
    remove-highlighter window/miik_response
    set-option -remove window completers "option=miik_completions"
    remove-hooks window miik
}

provide-module miik %{
    define-command -docstring 'Selects a Lisp form' \
    miik-select-form %{
        try %{
            execute-keys '<a-a>b'
            miik-select-form
        }
    }

    declare-option -docstring 'The location of the miik' str miik_host 'localhost:3700'
    declare-option -docstring 'The responses given to Kakoune by miik' range-specs miik_response
    declare-option -docstring 'The completions generated by miik' -hidden completions miik_completions
    declare-option -docstring 'The completion response received by miik' -hidden str-list miik_completions_response

    define-command -docstring 'Sends the selection to the miik server' \
    miik-send-selection %{
        evaluate-commands -draft -save-regs '^ab' %{
            # Evaluate things in the correct package
            execute-keys 'Z<a-/>in-package<ret><a-a>b"byz'

            set-register a %sh{ printf '%s\n%s' "$kak_main_reg_b" "$kak_selection" | socat - "tcp:$kak_opt_miik_host" }
            execute-keys '<a-:>;'
            set-option window miik_response %val{timestamp} "%val{selection_desc}|%val{selection}{comment}{\} %reg{a}"
        }
        trigger-user-hook miik_image_changed
    }

    define-command -docstring 'Generates miik completion candidates' -hidden \
    miik-generate-completion-candidates %{
        evaluate-commands -draft -save-regs '/a0' %{
            # We need to switch packages so that the Common Lisp printer generates shortened names
            try %{
                execute-keys -draft '<esc>,<a-/>in-package<ret><a-a>b"ay'
            }
            evaluate-commands %sh{
                results=$(printf '%s\n(miik::generate-completions)' "$kak_reg_a" | socat - "tcp:$kak_opt_miik_host")
                printf 'set-option buffer=%s miik_completions_response %s' "$kak_bufname" "$results"
            }
        }
    }

    define-command -docstring '`describe`s a symbol and shows result in a popup' -params 1 \
    miik-describe-symbol %{
        evaluate-commands -save-regs '/0ab' %{
            set-register b "%val{cursor_line}.%val{cursor_column}"
            try %{
                execute-keys -draft '<esc>,<a-/>in-package<ret><a-a>b"ay'
            }
            info -anchor %reg{b}  %sh{
                printf "%s(describe '$1)" "$kak_reg_a" | socat - tcp:localhost:3700
            }
        }
    }
    define-command -docstring '`describe`s the symbol under the cursor' \
    miik-describe-cursor %{
        evaluate-commands -save-regs 'a' %{
            set-option -add local extra_word_chars ':' '-'
            execute-keys -draft '<a-a>w"ay'
            miik-describe-symbol %reg{a}
        }
    }

    define-command -docstring 'Sends a form to the miik server' \
    miik-send-form %{
        evaluate-commands -draft %{
            miik-select-form
            miik-send-selection
        }
    }

    declare-user-mode miik
    map -docstring 'Send the current form to miik' global miik c ': miik-send-form<ret>'
    map -docstring 'Trigger reloading of miik client' global miik L ': trigger-user-hook miik_image_changed<ret>'
    map -docstring 'Describe symbol under cursor' global miik h ': miik-describe-cursor<ret>'
}
